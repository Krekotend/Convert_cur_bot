import logging

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from service import test_in_dig, conversion

router: Router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.message(CommandStart())
async def cmd_start(message: Message):
    logger.info(f"User {message.from_user.username} started the bot")
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å {message.from_user.username}\!\n'
                              '–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä–æ—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É\.\n'
                              '–ó–∞–ø–∏—à–∏—Ç–µ *—Å—É–º–º—É\, –≤–∞–ª—é—Ç—É –∏ –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏* –∏ _–æ—Ç–ø—Ä–∞–≤—Ç–µ_\n'
                              '–ü—Ä–∏–º–µ—Ä \: *100 USD to EUR*\n'
                              '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±—Ä–∞–≤ /help –∏–ª–∏ –≤ –º–µ–Ω—é \n',
                         parse_mode='MarkdownV2')


@router.message(Command(commands=['help']))
async def cmd_help(message: Message):
    await message.answer(text='–ß—Ç–æ –±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã –Ω—É–∂–Ω–æ\:\n'
                              '–ó–∞–ø–∏—à–∏—Ç–µ *—Å—É–º–º—É\, –≤–∞–ª—é—Ç—É –∏ –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏* –∏ _–æ—Ç–ø—Ä–∞–≤—Ç–µ_\n'
                              '–ü—Ä–∏–º–µ—Ä \: *100 USD to EUR* \n'
                              '–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /convert \n '
                              '–ü—Ä–∏–º–µ—Ä \: */convert 100 USD to EUR* \n'
                              '—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /convert \- –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é ,\n'
                              '/contacts \- –≤—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã,\n'
                              '||/dice \- –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞||',
                         parse_mode='MarkdownV2')


@router.message(Command(commands=['convert']))
async def cmd_convert(message: Message):
    logger.info(f"User {message.from_user.username} used converter")
    t_msg = message.text.replace('/convert', '')
    if not t_msg:
        await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.')
        return
    if test_in_dig(t_msg):
        resp_text = conversion(t_msg)
        await message.answer(text=f'{resp_text}')
    else:
        await message.answer(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

@router.message(Command(commands=['dice']))
async def cmd_dice_in_group(message: Message):
    await message.answer_dice(emoji="üé≤")


@router.message(F.text.lower().in_({'hi', 'hello', '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ'}))
async def process_hello(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!')


@router.message(F.text.lower().in_({'bye', 'goodbye', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–ø–æ–∫–∞', '–ø—Ä–æ—â–∞–π'}))
async def process_bye(message: Message):
    await message.answer('–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!')


@router.message(Command(commands=['contacts']))
async def show_contacts(message: Message):
    await message.answer(text='*_I will be glad to accept suggestions or wishes_*\n'
                              '||In the subject of the email\, indicate Tg_Convert||\n'
                              '||Tg:\@Krekotend, email:Krekotend\@gmail\.com||',
                         parse_mode='MarkdownV2')


def main_filter(message: Message) -> bool:
    return test_in_dig(message.text)


@router.message(main_filter)
async def show_conversion(message: Message):
    logger.info(f"User {message.from_user.username} used converter")
    resp_text = conversion(message.text)
    await message.answer(text=f'{resp_text}')


@router.message()
async def other(message: Message):
    await message.reply(text='–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ ,'
                             '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ç–æ—Ä—É—é —è –ø–æ–π–º—É '
                             ' /help —Å–ø–∏–æ–∫ –∫–æ–º–∞–Ω–¥ ')
